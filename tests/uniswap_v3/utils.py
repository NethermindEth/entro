import logging
import os
from typing import Optional

from eth_utils import to_checksum_address

from python_eth_amm import PoolFactory
from python_eth_amm.uniswap_v3 import UniswapV3Pool

TICK_SPACINGS = {"LOW": 10, "MEDIUM": 60, "HIGH": 200}

MIN_TICK = {10: -887270, 60: -887220, 200: -887200}
MAX_TICK = {10: 887270, 60: 887220, 200: 887200}

POOL_FACTORY_ADDRESS = to_checksum_address("0xabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde")

# Hacky but functioning way to copy the typescript big number behavior from uniV3 test suite

ENCODED_PRICES = {
    "1_1": 79228162514264337593543950336,
    "1_2": 56022770974786139918731938227,
    "1_8": 28011385487393069959365969113,
    "1_64": 9903520314283042199192993792,
    "1_10": 25054144837504793118641380156,
    "1_1000000": 79228162514264337593543950,
    "1_1000000000000": 79228162514264337593543,
    "1_170141183460469231731687303715884105728": 6085630636,
    "2_1": 112045541949572279837463876454,
    "2_5": 50108289675009586237282760313,
    "5_2": 125270724187523965593206900784,
    "8_1": 224091083899144559674927752909,
    "10_1": 250541448375047931186413801569,
    "50_100": 56022770974786139918731938227,
    "64_1": 633825300114114700748351602688,
    "98_100": 78431879364700595886224713518,
    "99_100": 78831026366734652303669917531,
    "100_121": 72025602285694852357767227578,
    "101_100": 79623317895830914510639640423,
    "121_100": 87150978765690771352898345369,
    "200_100": 112045541949572279837463876454,
    "1000_100": 250541448375047931186413801569,
    "10000_100": 792281625142643375935439503360,
    "1000000_1": 79228162514264337593543950336000,
    "1000000000000_1": 79228162514264337593543950336000000,
    "1237940039285380274899124224_1": 2787593149816327892691964784081045188247552,
    "79228162514264337593543950336_1": 22300745198530623141535718272648361505980416,
    "170141183460469231731687303715884105728_1": 1033437718471923706666374484006904511252097097914,
}


def encode_sqrt_price(reserve_1: int, reserve_2: int) -> int:
    return ENCODED_PRICES[f"{reserve_1}_{reserve_2}"]


def decode_sqrt_price(sqrt_price) -> int:
    return (sqrt_price / (2**96)) ** 2
